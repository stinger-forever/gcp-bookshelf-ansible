- name: First Play
  hosts: localhost
  become: yes
  become_user: root
#  vars:
#    var1: value
  vars_files:
    - vars/main.yml
  tasks:
    - name: fix apt sources
      lineinfile:
        path: /etc/apt/sources.list
        regexp: '^(.*) http://ppa.launchpad.net/ansible/ansible/ubuntu(.*)$'
        state: absent
        backrefs: yes

    - name: setup dependencies
      apt:
        update_cache: yes
        allow_unauthenticated: yes
        name:
          - wget
          - build-essential
          - supervisor
          - python
          - python-dev
          - python-pip
          - libffi-dev
          - libssl-dev

    - name: pip setup part
      pip:
        name:
          - pip
          - virtualenv
        extra_args: --upgrade

    - name: Add the user 'pythonapp' for app
      user:
        name: pythonapp
        home: /home/pythonapp
        state: present

    - name: export variables
      shell: export HOME=/root

    - name: get project ID
      shell: gcloud projects list | awk '{print$1}' | awk NR==2
      register: project_id

    - name: get db instance name
      shell: gcloud sql instances list | awk '{print$1}' | awk NR==2
      register: db_instance

    - name: get db password
      shell: gcloud secrets versions access latest --secret="bookshelf-user"
      register: db_password

    - name: get oauth secret
      shell: gcloud secrets versions access latest --secret="oauth-secret"
      register: oauth_secret

    - name: clone the project
      git:
        repo: https://github.com/GoogleCloudPlatform/getting-started-python.git
        dest: /opt/app
        clone: yes
        version: steps
        accept_hostkey: yes

    - name: Put supervisor configuration in proper place
      copy:
        src: /opt/playbooks/configs/python-app.conf
        dest: /etc/supervisor/conf.d/python-app.conf

    - name: Put Systemd config for mysql-proxy
      copy:
        src: /opt/playbooks/configs/cloud-sql-proxy.service
        dest: /etc/systemd/system/cloud-sql-proxy.service

    - name: configure systemd for mysql proxy
      lineinfile:
        path: /etc/systemd/system/cloud-sql-proxy.service
        regexp: '^(.*)ExecStart=/usr/local/bin/cloud_sql_proxy(.*)$'
        line: ExecStart=/usr/local/bin/cloud_sql_proxy -dir=/var/run/cloud-sql-proxy -instances={{ project_id.stdout }}:{{ google.region }}:{{ db_instance.stdout }}=tcp:3306
        backrefs: yes

    - name: get cloud_sql_proxy executable
      get_url:
        url: https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
        dest: /usr/local/bin/cloud_sql_proxy

    - name: make cloud_sql_proxy executable
      file:
        path: /usr/local/bin/cloud_sql_proxy
        mode: +x

    - name: reload systemd and start cloud-sql-proxy
      systemd:
        name: cloud-sql-proxy
        daemon_reload: yes
        enabled: yes
        state: started

    - name: configure application variables
      template:
        src: templates/config.py.j2
        dest: /opt/app/7-gce/config.py
#    - name: configure databackend for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)DATA_BACKEND =(.*)$'
#        line: DATA_BACKEND = 'cloudsql'
#        backrefs: yes
#
#    - name: configure project ID for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)PROJECT_ID =(.*)$'
#        line: PROJECT_ID = '{{ project_id.stdout }}'
#        backrefs: yes
#
#    - name: configure mysql user for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)CLOUDSQL_USER =(.*)$'
#        line: CLOUDSQL_USER = 'bookshelf-user'
#        backrefs: yes
#
#    - name: configure mysql password for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)CLOUDSQL_PASSWORD =(.*)$'
#        line: CLOUDSQL_PASSWORD = '{{ db_password.stdout }}'
#        backrefs: yes
#
#    - name: configure mysql database for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)CLOUDSQL_DATABASE =(.*)$'
#        line: CLOUDSQL_DATABASE = 'db'
#        backrefs: yes
#
#    - name: configure mysql database for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)CLOUD_STORAGE_BUCKET =(.*)$'
#        line: CLOUD_STORAGE_BUCKET = 'bookshelf-app-storage-gasparyan'
#        backrefs: yes
#
#    - name: configure mysql connection for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)CLOUDSQL_CONNECTION_NAME =(.*)$'
#        line: CLOUDSQL_CONNECTION_NAME = '{{ project_id.stdout }}:{{ google.region }}:{{ db_instance.stdout }}=tcp:3306'
#        backrefs: yes
#
#    - name: configure mysql connection for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)GOOGLE_OAUTH2_CLIENT_ID = (.*)$'
#        line: GOOGLE_OAUTH2_CLIENT_ID = '259859758116-c911mmu133rero8usvtp6bfkdfelh39p.apps.googleusercontent.com'
#        backrefs: yes
#
#    - name: remove unneeded example
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)your-client-id(.*)$'
#        state: absent
#        backrefs: yes
#
#    - name: configure mysql connection for python app
#      lineinfile:
#        path: /opt/app/7-gce/config.py
#        regexp: '^(.*)GOOGLE_OAUTH2_CLIENT_SECRET =(.*)$'
#        line: GOOGLE_OAUTH2_CLIENT_SECRET = '{{ oauth_secret.stdout }}'
#        backrefs: yes

    - name: execute script to fast-forward
      shell: |
        # Python environment setup
        pip install flask flask_sqlalchemy pymysql
        virtualenv -p python3 /opt/app/7-gce/env
        source /opt/app/7-gce/env/bin/activate
        /opt/app/7-gce/env/bin/pip install -r /opt/app/7-gce/requirements.txt

    - name: Set ownership to newly created account
      file:
        path: /opt/app
        owner: pythonapp
        group: pythonapp
        recurse: yes

    - name: generate database tables
      shell: python /opt/app/7-gce/bookshelf/model_cloudsql.py

    - name: start supervisor
      supervisorctl:
        state: present
